import { Component, ElementRef, Inject } from "@angular/core';
import { ComponentContainer } from 'golden-layout';
import { BaseComponentDirective } from '{workspace}-lib';

@Component({
    selector: 'app-{name}-component',
    templateUrl: './{name}.component.html',
    styleUrls: ['./{name}.component.{style}']
})

export class {componentName}Component extends BaseComponentDirective {
  private value: string;
  public initialValue: string;

  constructor(@Inject(BaseComponentDirective.GoldenLayoutContainerInjectionToken) private container: ComponentContainer, elRef: ElementRef) {
    super(elRef.nativeElement);
    
    this.container.stateRequestEvent = () => this.handleContainerStateRequestEvent();

    const state = this.container.initialState;
    let temp: string;
    if (state === undefined) {
        temp = {componentName}Component.undefinedValue;
    } else {
        if (typeof state !== 'string') {
            temp = 'Not a string'; // handle if state is the wrong data type
        } else {
            temp = state;
        }
    }
    this.value = temp;
    this.initialValue = this.value;
  }
  

  updateValue(value: string) {
    this.value = value;
  }

  handleContainerStateRequestEvent(): string {
    return this.value;
  }
}

export namespace {componentName}Component {
  export const componentTypeName = '{camelName}';
  export const undefinedValue = 'undefined'; // set to handle undefined
}