#!/bin/bash

Color_Off='\033[0m'       # Text Reset
# Regular Colors
Red='\033[0;31m'          # Red
Green='\033[0;32m'        # Green
Blue='\033[0;34m'         # Blue
Yellow='\033[0;33m'       # Yellow
Purple='\033[0;35m'       # Purple

remove="${Purple}DELETE${Color_Off}"
success="${Green}SUCCESS${Color_Off}"
create="${Green}CREATE${Color_Off}"
update="${Green}UPDATE${Color_Off}"
error="${Red}ERROR${Color_Off}"
starting="${Yellow}STARTING${Color_Off}"
line="${Yellow}#################################${Color_Off}"
complete="${Yellow}COMPLETED${Color_Off}"

empty="empty"
name=$empty
port=$empty
workspace=$empty
basePath="/workspace"
success="SUCCESS"
error="ERROR"
starting="STARTING"

command_msg(){
  if [ $? == 0 ] ; then
    echo -e "$1 $2"
  else
    echo -e "$error $2"
    exit 1
  fi
}

# display help message if -h is a commandline arg
help_message() {
  if [[ $1 == "-h" ]]; then
    echo "Usage add-mfe-project.sh -p {dev port} -w {workspace} -n {project name} [options]";
    echo "-n: Angular project name";
    echo "-p: Module federation remote's port and angular dev port";
    echo "OPTIONS:"
    echo "-w: Angular workspace name workspace (default: package.json name)- hint: look at your lib {workspace}-lib"
    echo "-b Root of the angular mono-repo"
    exit 1
  fi
}

validate_name() {
  appPath=$1
  if [[ -f "$appPath/app.module.ts" ]]; then
    echo -e "$error Project with the same name already exists";
    exit 1
  fi
}

validate_port() {
  echo "valid port"
  # grep to see if the requested port is already assigned to another project
  testPort="$(grep "\"port\": $port" ./angular.json)"
  # use the grep result to wildcard compare on the requested port
  if [[ $testPort == *"$port"* ]]; then
    echo -e "$error A project already exists on this port";
    exit 1
  fi
}

validate_args() {
  if [[ $port == $empty ]] || [[ $name == $empty ]] ; then
    echo -e "$error Invalid arguments, please see help (-h)"
    exit 1
  fi
}

while getopts n:p:w:b:h flag
do
    case "${flag}" in
        n) name=${OPTARG};;
        p) port=${OPTARG};;
        w) workspace=${OPTARG};;
        b) basePath=${OPTARG};;
        h) help="-h";;
    esac
done

if [[ $workspace == $empty ]]; then
  workspace=$(jq ".name" package.json)
  command_msg $success "Workspace set to $workspace"
fi

# display help message if -h is a commandline arg
help_message $help

validate_args

if [[ ! -d $basePath ]]; then
  echo -e "$error Root of the angular mono-repo cannot be found ($basePath)"
  exit 1
fi

# path for the new project relative to basePath

projectPath="./projects/$name/src";
appPath="$projectPath/app"

cd $basePath

validate_name $appPath
validate_port

echo -e $line
echo -e "$starting: Create MFE project $name on port $port"

# Create mfe ng project with name provided
ng generate application $name
command_msg $success "Project $name create"
# configure the new project as a module federation remote on the port provided
ng add @angular-architects/module-federation --project $name --port $port --type remote
command_msg $success "Module Federation configure as remote on port: $port"

./scripts/patch-existing-project -n $name -b $basePath

ng add @angular/material --project $name
command_msg $success "angular/material added to project $name"

# add serve and build scripts to package.json
serveAll=$(jq ".scripts.serve" ./package.json | sed -e 's/^"//' -e 's/"$//' -e 's/\\//g')
npmAddScript -k serve -v "$serveAll \"npm run serve:$name\"" -f
command_msg $update "package.json"

# if [[ -f "./Jenkinsfile"]]; then
#   sed -i "/def microFrontends.*/a \ \ \t\t\t\t\t\t\t\t\t\t $name" ./Jenkinsfile
# fi

./scripts/add-formly-to-project -n $name -b $basePath

cp $basePath/templates/app.component.html $basePath/projects/shell/src/app/app.component.html
command_msg $update "projects/shell/src/app/app.component.html"

# ./scripts/add-gl-to-project -n $name -b $basePath -t r -w $workspace -i n

echo -e "$success MFE project $name on port $port created"
echo -e $line
