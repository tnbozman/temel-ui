#!/bin/bash
ngVersion=15
ngCli="@angular/cli"
basePath="/workspaces/temel-ui"
success="SUCCESS"
error="ERROR"
starting="STARTING"

# display help message if -h is a commandline arg
help_message() {
  if [[ $1 == "-h" ]]; then
    echo "Usage mono-repo-project -n {workspace name} [options]";
    echo "-n: Angular workspace name";
    echo "OPTIONS:"
    echo "-b Root of the angular mono-repo"
    exit 0
  fi
}

validate_args() {
  if [[ $name == $empty ]] ; then
    echo "$error: Invalid arguments, please see help (-h)"
    exit 0
  fi
}

while getopts n:b:h flag
do
    case "${flag}" in
        n) name=${OPTARG};;
        b) basePath=${OPTARG};;
        h) help="-h";;
    esac
done

# display help message if -h is a commandline arg
help_message $help

validate_args

echo "#################################"
echo "$starting: Creating workspace $name"
echo "#################################"

if [[ ! -d $basePath ]]; then
  echo "$error: Root of the angular mono-repo cannot be found ($basePath)"
  exit 0
fi

cd $basePath
# check ng cli installed > version 15
ngInstalled="$(npm list -g | grep @angular/cli)"
if [[ ngInstalled == *"$ngCli@$ngVersion"* ]]; then
  echo "$success: ng cli already installed ($ngInstalled)"
else
  npm install -g @angular/cli
  echo "$success: @angular/cli installed"
fi

cp ./templates/material.modules.ts $basePath
echo "$success: material.modules copied"

ng new $name --no-create-application --directory ./
echo "$success: workspace $name created"
ng generate library $name-lib
echo "$success: library $name-lib created"

./scripts/patch-lib -n temel-lib -b $basePath
echo "$success: library $name-lib patched"
ng generate application shell
echo "$success: project shell created"
./scripts/patch-existing-project -n shell -b $basePath
echo "$success: project shell patched"

ng add @angular/material
echo "$success: angular/material added"

ng add @angular-architects/module-federation --project shell --port 4200 --type dynamic-host
echo "$success: Module federation configured for shell project"
