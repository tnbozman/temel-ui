#!/bin/bash
ngVersion=15.2.8
ngCli="@angular/cli"
basePath="/workspace"
success="SUCCESS"
error="ERROR"
starting="STARTING"

# display help message if -h is a commandline arg
help_message() {
  if [[ $1 == "-h" ]]; then
    echo "Usage mono-repo-project -n {workspace name} [options]";
    echo "-n: Angular workspace name";
    echo "OPTIONS:"
    echo "-b Root of the angular mono-repo"
    exit 0
  fi
}

validate_args() {
  if [[ $name == $empty ]] ; then
    echo "$error: Invalid arguments, please see help (-h)"
    exit 0
  fi
}

while getopts n:b:h flag
do
    case "${flag}" in
        n) name=${OPTARG};;
        b) basePath=${OPTARG};;
        h) help="-h";;
    esac
done

# display help message if -h is a commandline arg
help_message $help

validate_args

echo "#################################"
echo "$starting: Creating $name"
echo "#################################"

# as angular is difficult with dependency management, ensure legacy-peer-deps is set

if [[ ! -d $basePath ]]; then
  echo "$error: Root of the angular mono-repo cannot be found ($basePath)"
  exit 0
fi

cd $basePath

projectPath="./projects/$name/src";
appPath="$projectPath/app"

cp ./templates/material.modules.ts $basePath
echo "$success: material.modules copied"
rm .gitignore
ng new $name --no-create-application --directory ./ --skip-install
echo "$success: workspace $name created"
ng generate library $name-lib --skip-install
echo "$success: library $name-lib created"

./scripts/patch-existing-lib -n $name-lib -b $basePath
echo "$success: library $name-lib patched"

mkdir -p ./projects/$name-lib/src/lib/golden-layout
cp $basePath/templates/base-component.directive ./projects/$name-lib/src/lib/golden-layout/base-component.directive.ts
cp $basePath/templates/text-component.interface ./projects/$name-lib/src/lib/golden-layout/text-component.interface.ts
echo "$success: golden layout directive add to $name-lib"
echo "export * from './lib/golden-layout/base-component.directive';" >> ./projects/$name-lib/src/public-api.ts
echo "export * from './lib/golden-layout/text-component.interface';" >> ./projects/$name-lib/src/public-api.ts

sed -i "/^@NgModule.*/i import { BaseComponentDirective } from './golden-layout/base-component.directive';" ./projects/$name-lib/src/lib/$name-lib.module.ts
sed -i "/exports.*/a BaseComponentDirective," ./projects/$name-lib/src/lib/$name-lib.module.ts
sed -i "/declarations.*/a BaseComponentDirective," ./projects/$name-lib/src/lib/$name-lib.module.ts

echo "$starting: create project shell"
ng generate application shell --skip-install
echo "$success: project shell created"
./scripts/patch-existing-project -n shell -b $basePath
echo "$success: project shell patched"

ng add @angular/material --project shell
echo "$success: angular/material added"

ng add @angular-architects/module-federation --project shell --port 4200 --type dynamic-host
echo "$success: Module federation configured for shell project"

./scripts/add-formly-to-project -n shell -b $basePath -i y
./scripts/add-gl-to-project -n shell -b $basePath -w $name -i y

npm install -g npm-add-script
npmAddScript -k serve -v "concurrently --kill-others \"npm run watch:$name-lib\" \"npm run serve:shell\"" -f

cp $basePath/templates/app.component.html $basePath/projects/shell/src/app/app.component.html

npm i concurrently --save-dev
npm install


echo "#################################"
echo "$success: Creating workspace $name complete"
echo "#################################"

