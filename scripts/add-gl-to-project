empty="empty"
name=$empty
install="n"
workspace="temel"
basePath="/workspace"
success="SUCCESS"
error="ERROR"
starting="STARTING"

help_message() {
  if [[ $1 == "-h" ]]; then
    echo "Usage new_mfe.sh -p {dev port} -n {project name} [options]";
    echo "-n: Project name"
    echo "OPTIONS:"
    echo "-i: install golden-layout (n)"
    echo "-w: Angular workspace name";
    echo "-b Root of the angular mono-repo"
    exit 0
  fi
}

validate_args() {
  if [[ $name == $empty ]] ; then
    echo "$error: Invalid arguments, please see help (-h)"
    exit 0
  fi
}

while getopts n:w:i:b:h flag
do
    case "${flag}" in
        n) name=${OPTARG};;
        w) workspace=${OPTARG};;
        b) basePath=${OPTARG};;
        i) install=${OPTARG};;
        h) help="-h";;
    esac
done

# display help message if -h is a commandline arg
help_message $help

validate_args

echo "#################################"
echo "$starting: Adding Golden Layout to Project $name"
echo "#################################"

cd $basePath
projectPath="./projects/$name/src";
appPath="$projectPath/app"

if [[ $install == "y" || $install == "Y" ]]; then
    npm install golden-layout --save
fi
mkdir -p $appPath/components/golden-layout
cp -r $basePath/templates/golden-layout/* $appPath/components/golden-layout/

sed -i "s/{workspace}/$workspace/g" $appPath/components/golden-layout/golden-layout-component.service.ts
sed -i "s/{workspace}/$workspace/g" $appPath/components/golden-layout/boolean/boolean.component.ts
sed -i "s/{workspace}/$workspace/g" $appPath/components/golden-layout/text/text.component.ts
sed -i "s/{workspace}/$workspace/g" $appPath/components/golden-layout/color/color.component.ts
sed -i "s/{workspace}/$workspace/g" $appPath/components/golden-layout/controls/controls.component.ts
sed -i "s/{workspace}/$workspace/g" $appPath/components/golden-layout/golden-layout-host/golden-layout-host.component.ts
