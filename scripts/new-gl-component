#!/bin/bash

empty="empty"
name=$empty
workspace=$empty
basePath="/workspace"
success="SUCCESS"
error="ERROR"
starting="STARTING"

help_message() {
  if [[ $1 == "-h" ]]; then
    echo "Usage new_mfe.sh -p {dev port} -n {project name} [options]";
    echo "-n: Component name in (kebab-case)"
    echo "-w: Angular workspace name";
    echo "OPTIONS:"
    echo "-b Root of the angular mono-repo"
    exit 0
  fi
}

validate_args() {
  if [[ $name == $empty || $workspace == $empty ]] ; then
    echo "$error: Invalid arguments, please see help (-h)"
    exit 0
  fi
}

while getopts n:w:b:h flag
do
    case "${flag}" in
        n) name=${OPTARG};;
        w) workspace=${OPTARG};;
        b) basePath=${OPTARG};;
        h) help="-h";;
    esac
done

# display help message if -h is a commandline arg
help_message $help

validate_args

echo "#################################"
echo "$starting: Creating Golden Layout Component $name"
echo "#################################"


if [[ ! -d $basePath ]]; then
  echo "$error: Root of the angular mono-repo cannot be found ($basePath)"
  exit 0
fi

cd $basePath
projectPath="./projects/$name/src";
appPath="$projectPath/app"

# kabab case name to camel case
componentName="${echo $name | sed -e "s/\b\(.\)/\u\1/g" | sed -e 's/-//g'}Component"
componentPath="./components/golden-layout/$name/$name.component"

ng generate component components/golden-layout/${name} --project=$project
echo "$success: $name component generated"

sed -i "/^@NgModule.*/i import { $componentName } from '$componentPath';" $appPath/app.module.ts
sed -i "/declarations.*/a $componentName," $appPath/app.module.ts

echo "$success: component $name registered within app.module.ts"

cp $basePath/templates/gl.component ${componentPath}.ts
cp $basePath/templates/gl.component.html ${componentPath}.html

sed -i "s/{workspace}/$workspace/g" ${componentPath}.ts
sed -i "s/{name}/$name/g" ${componentPath}.ts
sed -i "s/{componentName}/$componentName/g" ${componentPath}.ts


