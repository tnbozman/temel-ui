#!/bin/bash

Color_Off='\033[0m'       # Text Reset
# Regular Colors
Red='\033[0;31m'          # Red
Green='\033[0;32m'        # Green
Blue='\033[0;34m'         # Blue
Yellow='\033[0;33m'       # Yellow
Purple='\033[0;35m'       # Purple

remove="${Purple}DELETE${Color_Off}"
success="${Green}SUCCESS${Color_Off}"
create="${Green}CREATE${Color_Off}"
update="${Green}UPDATE${Color_Off}"
error="${Red}ERROR${Color_Off}"
starting="${Yellow}STARTING${Color_Off}"
line="${Yellow}#################################${Color_Off}"
complete="${Yellow}COMPLETED${Color_Off}"

empty="empty"
name=$empty
workspace=$empty
project=$empty
basePath="/workspace"
mfe="y"

command_msg(){
  if [ $? == 0 ] ; then
    echo -e "$1 $2"
  else
    echo -e "$error $2"
    exit 1
  fi
}

help_message() {
  if [[ $1 == "-h" ]]; then
    echo "Usage new-gl-component.sh -n {component-name} -p {project name} -w {workspace} [options]";
    echo "-n: Component name in (kebab-case)"
    echo "-p: Angular project name"
    echo "-w: Angular workspace name";
    echo "OPTIONS:"
    echo "-m Register as mfe component (add to shell?) (y)"
    echo "-b Root of the angular mono-repo"
    exit 1
  fi
}

validate_args() {
  if [[ $name == $empty || $workspace == $empty || $project == $empty ]] ; then
    echo -e "$error Invalid arguments, please see help (-h)"
    exit 1
  fi
}

while getopts n:p:w:b:h flag
do
    case "${flag}" in
        n) name=${OPTARG};;
        p) project=${OPTARG};;
        w) workspace=${OPTARG};;
        b) basePath=${OPTARG};;
        h) help="-h";;
    esac
done

# display help message if -h is a commandline arg
help_message $help

validate_args

echo -e $line
echo -e "$starting Creating Golden Layout Component $name"

if [[ ! -d $basePath ]]; then
  echo -e "$error Root of the angular mono-repo cannot be found ($basePath)"
  exit 1
fi

cd $basePath
projectPath="./projects/$project/src";
appPath="$projectPath/app"

# kabab case name to camel case
componentName="${echo $name | sed -e "s/\b\(.\)/\u\1/g" | sed -e 's/-//g'}Component"
componentPath="$appPath/components/golden-layout/$name/$name.component"

ng generate component components/golden-layout/${name} --project=$project
command_msg $success "$name component generated"

# sed -i "/^@NgModule.*/i import { $componentName } from '$componentPath';" $appPath/app.module.ts
# sed -i "/declarations.*/a $componentName," $appPath/app.module.ts
# echo -e "$success component $name registered within app.module.ts"

cp $basePath/templates/gl.component ${componentPath}.ts
cp $basePath/templates/gl.component.html ${componentPath}.html

sed -i "s/{workspace}/$workspace/g" ${componentPath}.ts
sed -i "s/{name}/$name/g" ${componentPath}.ts
sed -i "s/{componentName}/$componentName/g" ${componentPath}.ts

# register to service
sed -i "/^@Component.*/i import { $componentName } from '../$name/$name.component';" $appPath/components/golden-layout/golden-layout-host/golden-layout-host.component.ts
sed -i "/async load(): Promise<void>.*/a this.goldenLayoutComponentService.registerComponentType($componentName.componentTypeName, $componentName);" $appPath/components/golden-layout/golden-layout-host/golden-layout-host.component.ts
sed -i "/exposes.*/a './$componentName': '${componentPath}.ts';" $appPath/webpack.config.js
# register with shell
if [[ $mfe == "y" ]]; then
  # add to remote mfe webpack
  remotePublicHost=$(jq ".$project.architect.serve.options.publicHost" ./angular.json)

  camelName=$(echo $componentName || sed 's/Component//g')
  jq ".$name = { \"remoteEntry\": \"$remotePublicHost/remoteEntry.js\",\"exposedModule\": \"./$camelName\",\"ngModuleName\": \"$componentName\",\"isGoldenLayout\": true }" ./projects/shell/src/assets/mf.manifest.json > ./projects/shell/src/assets/mf.manifest.json
fi

echo -e "$success Golden Layout Component $name created"
echo -e $line


